define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/custom-style.js", "./vaadin-text-field.js", "../../../@polymer/polymer/lib/elements/dom-module.js"], function (_exports, _polymerElement, _customStyle, _vaadinTextField, _domModule) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NumberFieldElement = void 0;

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */
  var $_documentContainer = document.createElement('template');
  $_documentContainer.innerHTML = "<dom-module id=\"vaadin-number-field-template\">\n  <template>\n    <style>\n      :host([readonly]) {\n        pointer-events: none;\n      }\n\n      [part=\"decrease-button\"]::before {\n        content: \"\u2212\";\n      }\n\n      [part=\"increase-button\"]::before {\n        content: \"+\";\n      }\n\n      [part=\"decrease-button\"],\n      [part=\"increase-button\"] {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      /* Hide the native arrow icons */\n      [part=\"value\"]::-webkit-outer-spin-button,\n      [part=\"value\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      [part=\"value\"] {\n        /* Older Firefox versions (v47.0) requires !important */\n        -moz-appearance: textfield !important;\n      }\n    </style>\n\n    <div disabled$=\"[[!_allowed(-1, value, min, max)]]\" part=\"decrease-button\" on-click=\"_decreaseValue\" on-touchend=\"_decreaseButtonTouchend\" hidden$=\"[[!hasControls]]\">\n    </div>\n\n    <div disabled$=\"[[!_allowed(1, value, min, max)]]\" part=\"increase-button\" on-click=\"_increaseValue\" on-touchend=\"_increaseButtonTouchend\" hidden$=\"[[!hasControls]]\">\n    </div>\n  </template>\n\n  \n</dom-module>";
  document.head.appendChild($_documentContainer.content);
  var memoizedTemplate;
  /**
  * `<vaadin-number-field>` is a Polymer 2 element for number field control in forms.
  *
  * ```html
  * <vaadin-number-field label="Number">
  * </vaadin-number-field>
  * ```
  *
  * @memberof Vaadin
  * @extends Vaadin.TextFieldElement
  * @demo demo/index.html
  */

  var NumberFieldElement =
  /*#__PURE__*/
  function (_TextFieldElement) {
    babelHelpers.inherits(NumberFieldElement, _TextFieldElement);

    function NumberFieldElement() {
      babelHelpers.classCallCheck(this, NumberFieldElement);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(NumberFieldElement).apply(this, arguments));
    }

    babelHelpers.createClass(NumberFieldElement, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "ready", this).call(this);
        this.__previousValidInput = this.value || '';
        this.focusElement.type = 'number';
        this.focusElement.addEventListener('change', this.__onInputChange.bind(this));
      }
    }, {
      key: "_decreaseButtonTouchend",
      value: function _decreaseButtonTouchend(e) {
        // Cancel the following click and focus events
        e.preventDefault();

        this._decreaseValue();
      }
    }, {
      key: "_increaseButtonTouchend",
      value: function _increaseButtonTouchend(e) {
        // Cancel the following click and focus events
        e.preventDefault();

        this._increaseValue();
      }
    }, {
      key: "_decreaseValue",
      value: function _decreaseValue() {
        var currentValueOverMax = this.max != null && this.value != null && this.value != '' && this.value > this.max;

        if (currentValueOverMax) {
          this._setValue(this.max);
        } else {
          var incrementSign = this._getAllowedIncrementSign(-1);

          if (incrementSign) {
            this.__add(incrementSign);
          }
        }
      }
    }, {
      key: "_increaseValue",
      value: function _increaseValue() {
        var currentValueUnderMin = this.min != null && this.value != null && this.value != '' && this.value < this.min;

        if (currentValueUnderMin) {
          this._setValue(this.min);
        } else {
          var incrementSign = this._getAllowedIncrementSign(1);

          if (incrementSign) {
            this.__add(incrementSign);
          }
        }
      }
    }, {
      key: "__add",
      value: function __add(sign) {
        var incr = sign * (this.step || 1); // Behave like native number input adjusting to the next exact multiple of step.

        this._setValue(this._getValue(incr));
      }
    }, {
      key: "_setValue",
      value: function _setValue(value) {
        this.value = this.focusElement.value = value;
        this.dispatchEvent(new CustomEvent('change', {
          bubbles: true
        }));
      }
    }, {
      key: "_getValue",
      value: function _getValue(incr) {
        return (incr + incr * Math.floor((parseFloat(this.value || 0) / incr).toFixed(1))).toFixed(this.__decimals);
      }
    }, {
      key: "_getAllowedIncrementSign",
      value: function _getAllowedIncrementSign(sign) {
        if (this.disabled) {
          return false;
        }

        var initialIncr = sign * (this.step || 1);

        if (initialIncr > 0) {
          var validMin = this.min == null || this._getValue(initialIncr) > this.min;
          var validMax = this.max == null || this.value < this.max;

          if (validMin && validMax) {
            return sign;
          } else if (!validMax) {
            return false;
          } else if (!validMin) {
            return this.min / initialIncr;
          }
        } else {
          var _validMin = this.min == null || this.value > this.min;

          var _validMax = this.max == null || this._getValue(initialIncr) < this.max;

          if (_validMin && _validMax) {
            return sign;
          } else if (!_validMin) {
            return false;
          } else if (!_validMax) {
            return this.max / (this.step || 1);
          }
        }
      }
    }, {
      key: "_allowed",
      value: function _allowed(sign) {
        var incr = sign * (this.step || 1);
        return !this.disabled && (incr < 0 ? this.min == null || this.value > this.min : this.max == null || this.value < this.max);
      }
    }, {
      key: "_minChanged",
      value: function _minChanged() {
        this.focusElement.min = this.min;
      }
    }, {
      key: "_maxChanged",
      value: function _maxChanged() {
        this.focusElement.max = this.max;
      }
    }, {
      key: "_valueChanged",
      value: function _valueChanged(newVal, oldVal) {
        // Validate value to be numeric
        if (newVal && isNaN(parseFloat(newVal).toFixed(this.__decimals))) {
          this.value = '';
        } else if (!isNaN(parseFloat(this.value)) && parseFloat(this.value) !== parseFloat(parseFloat(this.value).toFixed(this.__decimals))) {
          // Validate correct decimals
          this.value = parseFloat(parseFloat(this.value).toFixed(this.__decimals));
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "_valueChanged", this).call(this, this.value, oldVal);
      }
    }, {
      key: "__onInputChange",
      value: function __onInputChange() {
        this.checkValidity() && this.__adjustDecimals();
      }
    }, {
      key: "__adjustDecimals",
      value: function __adjustDecimals() {
        // when step is not an integer, adjust decimals.
        this.focusElement.value && (this.value = parseFloat(this.focusElement.value).toFixed(this.__decimals));
      }
    }, {
      key: "_stepChanged",
      value: function _stepChanged(step) {
        this.focusElement.step = step; // Compute number of dedimals to display in input based on provided step

        this.__decimals = String(step).replace(/^\d*\.?(.*)?$/, '$1').length;

        this.__adjustDecimals();
      }
    }, {
      key: "checkValidity",
      value: function checkValidity() {
        // text-field mixin does not check against `min` and `max`
        if (this.min !== undefined || this.max !== undefined) {
          this.invalid = !this.focusElement.checkValidity();
        }

        return babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement.prototype), "checkValidity", this).call(this);
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-number-field';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.3.1';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
          * Set to true to display value increase/decrease controls.
          */
          hasControls: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
          * The minimum value of the field.
          */
          min: {
            type: Number,
            reflectToAttribue: true,
            observer: '_minChanged'
          },

          /**
           * The maximum value of the field.
           */
          max: {
            type: Number,
            reflectToAttribue: true,
            observer: '_maxChanged'
          },

          /**
           * Specifies the allowed number intervals of the field.
           */
          step: {
            type: Number,
            reflectToAttribue: true,
            observer: '_stepChanged',
            value: 1
          }
        };
      }
    }, {
      key: "template",
      get: function get() {
        if (!memoizedTemplate) {
          // Clone the superclass template
          memoizedTemplate = babelHelpers.get(babelHelpers.getPrototypeOf(NumberFieldElement), "template", this).cloneNode(true); // Retrieve this element's dom-module template

          var thisTemplate = _domModule.DomModule.import(this.is + '-template', 'template');

          var decreaseButton = thisTemplate.content.querySelector('[part="decrease-button"]');
          var increaseButton = thisTemplate.content.querySelector('[part="increase-button"]');
          var styles = thisTemplate.content.querySelector('style'); // Add the buttons and styles to the text-field template

          var inputField = memoizedTemplate.content.querySelector('[part="input-field"]');
          var prefixSlot = memoizedTemplate.content.querySelector('[name="prefix"]');
          inputField.insertBefore(decreaseButton, prefixSlot);
          inputField.appendChild(increaseButton);
          memoizedTemplate.content.appendChild(styles);
          return memoizedTemplate;
        }
      }
    }]);
    return NumberFieldElement;
  }(_vaadinTextField.TextFieldElement);

  _exports.NumberFieldElement = NumberFieldElement;
  window.customElements.define(NumberFieldElement.is, NumberFieldElement);
});